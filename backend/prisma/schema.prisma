generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = "mysql://root:mysql@localhost:3306/mycareer"
}

model Positions {
    positionId Int    @id @default(autoincrement())
    title      String

    // Job Information
    description String?
    division    String
    subUnit     String
    cgGroup     String
    dateFrom    DateTime
    dateTo      DateTime
    notice      DateTime

    supervisorId Int?

    // Relations
    supervisor   Positions?  @relation("Supervisor", fields: [supervisorId], references: [positionId], onDelete: SetNull)
    subordinates Positions[] @relation("Supervisor")
}

model Employees {
    employeeId Int    @id @default(autoincrement())
    role       String @default("staff")
    email      String @unique

    // Personal Information
    supervisorId  Int?
    jobTitle      String
    personalEmail String?
    phone2        String?
    phone         String?
    address       String?
    firstName     String
    lastName      String
    password      String
    category      String?
    grade         String?
    bgLevel       String?
    matricule     String? @unique

    // Relations
    supervisor   Employees?          @relation("Supervisor", fields: [supervisorId], references: [employeeId], onDelete: SetNull)
    subordinates Employees[]         @relation("Supervisor")
    recoveries   AccountRecoveries[]

    evaluations360          Evaluation360[]
    evaluation360Supervisor Evaluation360[] @relation("Supervisor")
    evaluation360Evaluator  Evaluator360[]

    objectives           Objectives[]
    objectivesSupervisor Objectives[] @relation("Supervisor")

    evaluations           Evaluations[]
    evaluationsSupervisor Evaluations[]       @relation("Supervisor")
    comments              ObjectiveComments[]
    alerts                Alerts[]
    deletedAt             DateTime?
}

model Evaluations {
    evaluationId       Int    @id @default(autoincrement())
    employeeId         Int
    supervisorId       Int
    supervisorJobTitle String
    evaluationYear     String @default("2024")
    evaluationStatus   String @default("draft")

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    efficiency       String? @db.VarChar(255)
    efficiencyRating Int?
    competency       String? @db.VarChar(255)
    competencyRating Int?
    commitment       String? @db.VarChar(255)
    commitmentRating Int?
    initiative       String? @db.VarChar(255)
    initiativeRating Int?
    respect          String? @db.VarChar(255)
    respectRating    Int?
    leadership       String? @db.VarChar(255)
    leadershipRating Int?
    overall          String? @db.VarChar(255)
    overallRating    Int?

    selfEvaluationStatus String
    selfEfficiency       String? @db.VarChar(255)
    selfCompetency       String? @db.VarChar(255)
    selfCommitment       String? @db.VarChar(255)
    selfInitiative       String? @db.VarChar(255)
    selfRespect          String? @db.VarChar(255)
    selfLeadership       String? @db.VarChar(255)
    selfOverall          String? @db.VarChar(255)

    employee   Employees @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
    supervisor Employees @relation("Supervisor", fields: [supervisorId], references: [employeeId], onDelete: Cascade)
}

model Evaluation360 {
    evaluation360Id Int            @id @default(autoincrement())
    employeeId      Int
    supervisorId    Int
    evaluationYear  String         @default("2024")
    employee        Employees      @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
    supervisor      Employees      @relation("Supervisor", fields: [supervisorId], references: [employeeId], onDelete: Cascade)
    evaluators      Evaluator360[]
}

model Evaluator360 {
    evaluator360Id    Int    @id @default(autoincrement())
    evaluatorStatus   String @default("draft")
    evaluationId      Int
    evaluatorId       Int
    evaluatorJobTitle String

    questionOne   String? @db.VarChar(255)
    ratingOne     Int?
    questionTwo   String? @db.VarChar(255)
    ratingTwo     Int?
    questionThree String? @db.VarChar(255)
    ratingThree   Int?
    questionFour  String? @db.VarChar(255)
    ratingFour    Int?
    questionFive  String? @db.VarChar(255)
    ratingFive    Int?

    evaluation Evaluation360 @relation(fields: [evaluationId], references: [evaluation360Id], onDelete: Cascade)
    evaluator  Employees     @relation(fields: [evaluatorId], references: [employeeId], onDelete: Cascade)
}

model Objectives {
    objectiveId          Int       @id @default(autoincrement())
    status               String    @default("draft")
    objectiveYear        String    @default("2024")
    employeeId           Int
    supervisorId         Int?
    evaluationStatus     String    @default("draft")
    selfEvaluationStatus String    @default("draft")
    reviewStatus         String    @default("draft")
    selfReviewStatus     String    @default("draft")
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt
    deletedAt            DateTime?

    title              String?             @db.VarChar(255)
    description        String?             @db.VarChar(255)
    successConditions  String?             @db.VarChar(255)
    deadline           String?             @db.VarChar(255)
    kpi                String?             @db.VarChar(255)
    grade              Int?
    comment            String?             @db.VarChar(255)
    selfComment        String?             @db.VarChar(255)
    midtermSelfComment String?             @db.VarChar(255)
    midtermComment     String?             @db.VarChar(255)
    employee           Employees           @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
    supervisor         Employees?          @relation("Supervisor", fields: [supervisorId], references: [employeeId], onDelete: Cascade)
    ObjectiveComment   ObjectiveComments[]
}

model Steps {
    stepId    Int     @id @default(autoincrement())
    name      String
    message   String
    messageFr String
    active    Boolean @default(false)
    dateFrom  String
    dateTo    String
    sent      Boolean @default(false)
}

model ObjectiveComments {
    commentId   Int      @id @default(autoincrement())
    objectiveId Int
    authorId    Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    content     String

    objective Objectives @relation(fields: [objectiveId], references: [objectiveId], onDelete: Cascade)
    author    Employees  @relation(fields: [authorId], references: [employeeId], onDelete: Cascade)
}

model Settings {
    settingId Int    @id @default(autoincrement())
    label     String
    name      String @unique
    value     String @db.VarChar(255)
}

model AccountRecoveries {
    recoveryId String    @id @default(uuid())
    createdAt  DateTime  @default(now())
    employeeId Int
    employee   Employees @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
    used       Boolean   @default(false)
}

model Alerts {
    alertId     Int      @id @default(autoincrement())
    hash        String
    recipientId Int
    createdAt   DateTime @default(now())

    employee Employees @relation(fields: [recipientId], references: [employeeId], onDelete: Cascade)

    @@unique([hash, recipientId])
}
