generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:mysql@localhost:3306/testdb"
}

model Employees {
  employeeId   Int     @id @default(autoincrement())
  role         String  @default("staff")
  email        String  @unique
  supervisorId Int?
  firstName    String
  lastName     String
  password     String
  matricule    String? @unique
  jobTitle     String

  supervisor   Employees?  @relation("Supervisor", fields: [supervisorId], references: [employeeId], onDelete: SetNull)
  subordinates Employees[] @relation("Supervisor")

  evaluations360          Evaluation360[]
  evaluation360Supervisor Evaluation360[] @relation("Supervisor")
  evaluation360Evaluator  Evaluator360[]

  objectives           Objectives[]
  objectivesSupervisor Objectives[] @relation("Supervisor")

  evaluations           Evaluations[]
  evaluationsSupervisor Evaluations[]       @relation("Supervisor")
  comments              ObjectiveComments[]
}

model Evaluations {
  evaluationId       Int      @id @default(autoincrement())
  employeeId         Int
  supervisorId       Int
  supervisorJobTitle String
  evaluationYear     String   @default("2024")
  evaluationStatus   String   @default("draft")
  updatedAt          DateTime @updatedAt
  createdAt          DateTime @default(now())

  efficiency           String?
  efficiencyRating     Int?
  competency           String?
  competencyRating     Int?
  commitment           String?
  commitmentRating     Int?
  initiative           String?
  initiativeRating     Int?
  respect              String?
  respectRating        Int?
  leadership           String?
  leadershipRating     Int?
  selfEvaluationStatus String
  selfEfficiency       String?
  selfCompetency       String?
  selfCommitment       String?
  selfInitiative       String?
  selfRespect          String?
  selfLeadership       String?

  employee   Employees @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  supervisor Employees @relation("Supervisor", fields: [supervisorId], references: [employeeId], onDelete: Cascade)
}

model Evaluation360 {
  evaluation360Id Int            @id @default(autoincrement())
  employeeId      Int
  supervisorId    Int
  evaluationYear  String         @default("2024")
  employee        Employees      @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  supervisor      Employees      @relation("Supervisor", fields: [supervisorId], references: [employeeId], onDelete: Cascade)
  evaluators      Evaluator360[]
}

model Evaluator360 {
  evaluator360Id    Int     @id @default(autoincrement())
  evaluatorStatus   String  @default("draft")
  evaluationId      Int
  evaluatorId       Int
  evaluatorJobTitle String
  evaluatorGrade    Int?
  evaluatorComment  String?

  evaluation Evaluation360 @relation(fields: [evaluationId], references: [evaluation360Id], onDelete: Cascade)
  evaluator  Employees     @relation(fields: [evaluatorId], references: [employeeId], onDelete: Cascade)
}

model Objectives {
  objectiveId          Int       @id @default(autoincrement())
  status               String    @default("draft")
  objectiveYear        String    @default("2024")
  employeeId           Int
  supervisorId         Int?
  evaluationStatus     String    @default("draft")
  selfEvaluationStatus String    @default("draft")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deletedAt            DateTime?

  title             String?
  description       String?
  successConditions String?
  deadline          String?
  kpi               String?
  grade             Int?
  comment           String?
  selfComment       String?

  employee         Employees           @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  supervisor       Employees?          @relation("Supervisor", fields: [supervisorId], references: [employeeId], onDelete: Cascade)
  ObjectiveComment ObjectiveComments[]
  ObjectiveHistory ObjectiveHistory[]
}

model ObjectiveHistory {
  objectiveHistoryId Int      @id @default(autoincrement())
  objectiveId        Int
  createdAt          DateTime @default(now())

  title             String
  description       String
  successConditions String
  deadline          String
  kpi               String

  objective Objectives @relation(fields: [objectiveId], references: [objectiveId], onDelete: Cascade)
}

model Steps {
  stepId   Int     @id @default(autoincrement())
  name     String
  message  String
  active   Boolean @default(false)
  dateFrom String
  dateTo   String
  sent     Boolean @default(false)
}

model ObjectiveComments {
  commentId   Int      @id @default(autoincrement())
  objectiveId Int
  authorId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String

  objective Objectives @relation(fields: [objectiveId], references: [objectiveId], onDelete: Cascade)
  author    Employees  @relation(fields: [authorId], references: [employeeId], onDelete: Cascade)
}

model Settings {
  settingId Int    @id @default(autoincrement())
  name      String
  value     String
}
